name: Java CI with Gradle

# main 브랜치에 push 또는 pull request 발생 시 실행
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  # Spring Boot 애플리케이션을 빌드하고 DockerHub에 이미지를 푸시
  build-docker-image:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    # 1. YAML 파일 생성 (application-prod.yml)
    - name: Create application-prod.yml from Secrets
      run: |
        mkdir -p ./src/main/resources
        echo "${{ secrets.APPLICATION_PROD_YML }}" > ./src/main/resources/application-prod.yml

    # 2. Java 17 설정
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    # 3. gradlew 실행 권한 부여
    - name: Grant execute permission to gradlew
      shell: bash
      run: chmod +x ./gradlew

    # 4. Gradle 빌드 (prod 프로파일 활성화)
    - name: Build with Gradle
      uses: gradle/gradle-build-action@v2.6.0
      with:
        arguments: clean bootJar -Dspring.profiles.active=prod

    # 5. Docker 이미지 빌드
    - name: docker image build
      run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/linku-backend-image .

    # 6. DockerHub 로그인
    - name: docker login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    # 7. Docker 이미지 푸시
    - name: docker Hub push
      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/linku-backend-image

  # EC2에서 이미지 pull 및 실행
  run-docker-image-on-ec2:
    needs: build-docker-image
    runs-on: self-hosted

    steps:
    # 1. 최신 이미지 pull
    - name: docker pull
      run: sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/linku-backend-image

    # 2. 기존 컨테이너 중지
    - name: docker stop container
      run: sudo docker stop $(sudo docker ps -q) 2>/dev/null || true

    # 3. 최신 이미지로 컨테이너 실행 (prod 프로파일 지정)
    - name: docker run new container
      run: |
        echo "Running the new container with image: ${{ secrets.DOCKERHUB_USERNAME }}/linku-backend-image"
        sudo docker run --name github-actions-demo --rm -d -p 8080:8080 \
             -e SPRING_PROFILES_ACTIVE=prod \
             ${{ secrets.DOCKERHUB_USERNAME }}/linku-backend-image

    # 4. 불필요한 이미지 제거
    - name: delete old docker image
      run: sudo docker system prune -f
